##!/bin/zsh

local KERNEL_BASE KERNEL_MODULES KERNEL_CONFIGS KERNEL_MAINTAINER NUM_CPUS MODULE_LOC
local KERNEL_CONFIG KERNEL_OPTIONS

KERNEL_CONFIG=""

if [ ! -r ~/.build_kernel ]; then
	echo "Konnte die Konfiguration ~/.build_kernel nicht lesen." >&2
	return
fi

source ~/.build_kernel

if ! [ "$KERNEL_BASE" -a "$KERNEL_MODULES" -a "$KERNEL_CONFIGS" -a \
	"$KERNEL_MAINTAINER" -a "$NUM_CPUS" -a "$MODULE_LOC" -a "$KERNEL_OPTIONS" ]; then
	echo "Achtung, build_kernel ist nicht richtig konfiguriert." >&2
	echo "Bitte passen Sie ~/.build_kernel ihren Wünschen entsprechend an." >&2
	return
fi

# auf benötigte Packete prüfen.
local pkg pkgstat pkg_check
pkg_check=0
for pkg in libncurses5-dev kernel-package dialog fakeroot; do
	if pkgstat=$(dpkg -s $pkg 2>/dev/null| grep '^Status'|awk '{print $4}') &&
		[ "$pkgstat" = "installed" ]; then
	else
		echo "Bitte installieren Sie das Packet \"$pkg\" vor der Benutzung von build_kernel." >&2
		pkg_check=1
	fi
done
if [ $pkg_check -ne 0 ]; then
	echo "Danke." >&2
	return
fi

if [ ! -f Makefile ]; then
	echo "Bitte führen Sie build_kernel in einem Kerneltree aus." >&2
	return
fi

if [ -f .config ]; then
	echo "Eine .config wurde gefunden!" >&2
	echo "Bitte stellen Sie sicher, das der Kerneltree clean ist." >&2
	return
fi

if [ -e $MODULE_LOC ]; then
	echo "$MODULE_LOC existiert bereits." >&2
	echo "Bitte stellen Sie sicher, dass der Pfad für die Module nicht existiert." >&2
	return
fi

if [ $NUM_CPUS -gt 1 ]; then
	(( CONCURRENCY_LEVEL = NUM_CPUS + 1 ))
	export CONCURRENCY_LEVEL
fi

local tempfile
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$

local i
for i in $KERNEL_CONFIGS/*; do
	if [ $(ls $i | wc -l) = 0 ]; then
		echo "Keine Konfigurationen vorhanden für $i" >&2
		return
	fi
done

dialog --backtitle "dreamind.de  --  Kernel Konfiguration" \
	--title "Host Auswahl" \
	--checklist "Bitte wählen sie die Rechner, für die sie einen Kernel compilieren wollen" \
	0 0 0 \
	$( for i in $KERNEL_CONFIGS/*; do
		echo $(basename $i) $(ls -c1 $i | head -n1) off
	done ) 2>! $tempfile

local KERNEL_HOSTS
KERNEL_HOSTS=($(sed 's/"//g' $tempfile))
rm $tempfile

local CONFIG_FOR_HOST=""
local VERSION=$(	grep "^VERSION" Makefile	| head -n 1 | awk -F "=" '{print $2}' | sed 's/ //g')
local PATCHLEVEL=$(	grep "^PATCHLEVEL" Makefile	| head -n 1 | awk -F "=" '{print $2}' | sed 's/ //g')
local SUBLEVEL=$(	grep "^SUBLEVEL" Makefile	| head -n 1 | awk -F "=" '{print $2}' | sed 's/ //g')
local EXTRAVERSION=$(	grep "^EXTRAVERSION" Makefile	| head -n 1 | awk -F "=" '{print $2}' | sed 's/ //g')
EXTRAVERSION="$EXTRAVERSION$(cat /dev/null $(find . -maxdepth 1 -regex '.*/localversion[^~]*' | sort -u))"
local KERNEL_VERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION

# make oldconfig
local host
for host in $KERNEL_HOSTS; do

	local CONFIG_FOR_HOST

	if [ ! -e $KERNEL_CONFIGS/$host/$KERNEL_VERSION ]; then
		local tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$

		dialog --backtitle "dreamind.de  --  Kernel Konfiguration" \
		--title "Konfigurationsauswahl für $host" \
		--radiolist "Leider wurde keine passende Konfiguration gefunden, bitte wählen sie die Konfiguration, welche sie für $host verwenden wollen." \
		0 0 0 \
		$( for i in $KERNEL_CONFIGS/$host/*; do
			echo $(basename $i) $(basename $i) off
		done ) 2>! $tempfile

		CONFIG_FOR_HOST=($(sed 's/"//g' $tempfile))
		rm $tempfile
		if [ -z "$CONFIG_FOR_HOST" ]; then
			echo "Abbruch!"
			return
		fi
	else
		CONFIG_FOR_HOST=$KERNEL_VERSION
	fi

	cp $KERNEL_CONFIGS/$host/$CONFIG_FOR_HOST .config

	case $TERM in
		xterm*|Eterm|rxvt)
			echo -ne "\033]0;make oldconfig für host: ${host}\007"
			;;
		*)
			;;
	esac
	make oldconfig

	dialog --backtitle "dreamind.de  --  Kernel Konfiguration" --title "Menuconfig" --clear --defaultno \
		--yesno "Möchten sie menuconfig für $host ausführen (oder war oldconfig ausreichend)?" 15 61

	case $? in
		0)
			case $TERM in
				xterm*|Eterm|rxvt)
					echo -ne "\033]0;make menuconfig für host: ${host}\007"
					;;
				*)
					;;
			esac
			make menuconfig
			;;
		1)
			echo "Kein Menuconfig mehr ausführen."
			;;
		255)
			echo "Sie haben ESC gedrückt, Abbruch!"
			rm -f .config
			return
			;;
	esac

	cp .config $KERNEL_CONFIGS/$host/$KERNEL_VERSION

done

if [ -z "$DO_NOT_BUILD" ]; then
	# Fertig mit den Konfigurationen, nun sollte für jeden Rechner eine aktuelle Konfiguration existieren.
	# Auf gehts mit dem Compilieren!!! ;)))

	local host
	for host in $KERNEL_HOSTS; do

		cp $KERNEL_CONFIGS/$host/$KERNEL_VERSION .config

		# make-kpkg optionen laden
		# 
		# derzeit wird nur die Variable MAKE_KPKG_OPTS beachtet
		#
		local MAKE_KPKG_OPTS
		if [ -f $KERNEL_OPTIONS/$host ]; then
			source $KERNEL_OPTIONS/$host
		fi

		# existieren externe Module für den host?
		if [ -d $KERNEL_MODULES/$host ]; then
			cd $(dirname $MODULE_LOC)
			local i
			for i in $(find $KERNEL_MODULES/$host -name \*.tar.gz); do
				tar xzvf $i
			done
			for i in $(find $KERNEL_MODULES/$host -name \*.tar.bz2); do
				tar xjvf $i
			done
			cd -
		fi

		case $TERM in
			xterm*|Eterm|rxvt)
				echo -ne "\033]0;make-kpkg --rootcmd fakeroot --initrd $MAKE_KPKG_OPTS kernel-image - [host=${host}]\007"
				;;
			*)
				;;
		esac
		echo "-$host" > localversion-zzz-build-kernel
		make-kpkg --rootcmd fakeroot --initrd $MAKE_KPKG_OPTS kernel-image

		# now generate the changelog
		echo -n "building changes for $host: "
		local CHANGESFILE=../$(awk '{gsub (".deb",".changes"); print $1}' debian/files)
		if dpkg-genchanges -B -m"$KERNEL_MAINTAINER" -e"$KERNEL_MAINTAINER" \
			>$CHANGESFILE 2>/dev/null; then
			echo "done."
		else
			echo "failed."
		fi

		debsign $CHANGESFILE

		if [ -d $KERNEL_MODULES/$host ]; then
			MODULE_LOC=$MODULE_LOC fakeroot make-kpkg modules
		fi

		rm -rf $MODULE_LOC

		rm -f localversion-zzz-build-kernel
		make mrproper
		[ -e debian/rules ] && fakeroot debian/rules clean
		[ -e conf.vars ] && rm -f conf.vars
		[ -e stamp-configure ] && rm -f stamp-*
		[ -e .config ] && rm .config
		if [ -d .git ]; then
			git clean -x -d
			git reset --hard
			git checkout -f
		fi
	done
	# in the end, make sure every generated changes file is correct and signed.
	#
	# Some "modules" packages tend to mixup (wrongly) the Maintainer and Changed By fields.
	# So the .changes files can't be signed :(
	for i in $(grep Changed-By ../*.changes|grep -v $EMAIL|awk -F: '{print $1}'); do
		sed -i 's/Changed-By/M_aintainer/' $i
		sed -i 's/Maintainer/Changed-By/' $i
		sed -i 's/M_aintainer/Maintainer/' $i
		debsign $i
	done
else
	make mrproper
fi
